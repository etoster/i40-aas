dist: bionic
language: minimal
git:
  depth: 1

if: (branch = ci-rework OR branch = master) AND (type = push OR type = pull_request)

env:
  global:
    - BUILD_TAG=$(cat .git/refs/heads/${TRAVIS_BRANCH})
      
before_install:
  - make --version
  - docker --version
  - docker-compose --version

stages:
  - lib-test
  - unit-test
  - integration-test
# use as build stage
#  - test
  - name: publish
    if: type = push

jobs: 
  include:
# Tests run but are broken
    - stage: unit-test #lib-test
      language: node_js
      node_js: lts/*
      install: 
        - cd src/ts/pkg/AMQP-Client
        - npm i
      script:
        - ./test/integration-test-setup 
        - sleep 30
        - npm test 
        - ./test/integration-test-teardown

# WORKS
    - stage: unit-test #lib-test
      language: go 
      env: GO111MODULE="on"
      install: 
        - docker-compose up -d rabbitmq
        - cd src/go/pkg/amqpclient
        - go mod download
      script:
        - go test 
        - docker-compose stop rabbitmq 

# WORKS
    - stage: unit-test #lib-test
      language: go 
      env: GO111MODULE="on"
      install: 
        - cd src/go/pkg/interaction
        - go mod download
      script:
        - go test 

# WORKS
    - stage: unit-test #lib-test
      language: go 
      env: GO111MODULE="on"
      install: 
        - cd src/go/pkg/logging
        - go mod download
      script:
        - go test 

    - stage: unit-test
      language: node_js
      node_js: lts/*
      env: SERVICE=onboarding-skill
      install: 
        - cd src/ts/cmd/${SERVICE}
        - npm i
      script: 
        - npm test
        - ./integration-test-setup 
        - sleep 30
        - npm run test-with-integration
        - ./integration-test-teardown

    - stage: unit-test
      language: node_js
      node_js: lts/*
      env: SERVICE=data-manager
      install: 
        - cd src/ts/cmd/${SERVICE}
        - npm i
      script: 
        - npm test
        - make build-single

    - stage: unit-test
      language: node_js
      node_js: lts/*
      env: SERVICE=adapter-registry
      install: 
        - cd src/ts/cmd/${SERVICE}
        - npm i
      script: 
        - npm test

    - stage: unit-test
      language: node_js
      node_js: lts/*
      env: SERVICE=endpoint-registry
      install: 
        - cd src/ts/cmd/${SERVICE}
        - npm i
      script: 
        - npm test
        - ./integration-test-setup 
        - sleep 30 
        - npm run test-with-integration
        - ./integration-test-teardown

    - stage: unit-test
      language: node_js
      node_js: lts/*
      env: SERVICE=https-endpoint-egress
      install: 
        - cd src/ts/cmd/${SERVICE}
        - npm i
      script: 
        - npm test

    - stage: unit-test
      language: node_js
      node_js: lts/*
      env: SERVICE=https-endpoint-ingress
      install: 
        - cd src/ts/cmd/${SERVICE}
        - npm i
      script: 
        - npm test

    - stage: unit-test
      language: node_js
      node_js: lts/*
      env: SERVICE=storage-adapter-mongodb
      install: 
        - cd src/ts/cmd/${SERVICE}
        - npm i
      script: 
        - ./integration-test-setup 
        - sleep 30
        - npm run test-with-integration
        - ./integration-test-teardown

    - stage: unit-test
      language: go 
      env: GO111MODULE="on" SERVICE=grpc-endpoint-ingress
      install: 
        - cd src/go/cmd/${SERVICE}
        - go mod download
      script:
        - go test 

    - stage: unit-test
      language: go 
      env: GO111MODULE="on" SERVICE=grpc-endpoint-egress
      install: 
        - cd src/go/cmd/${SERVICE}
        - go mod download
      script:
        - go test 

    - stage: unit-test
      language: go 
      env: GO111MODULE="on" SERVICE=endpoint-resolver
      install: 
        - cd src/go/cmd/${SERVICE}
        - go mod download
      script:
        - go test 

## WORKS
    - stage: unit-test #integration-test
      language: node_js
      node_js: lts/*
      install: 
        - npm install -g newman
        - make 
        - docker-compose -f docker-compose.yml up -d --force-recreate
        - sleep 60
      script:
        - newman run docs/postman/AAS.postman_collection.json

#    - stage: publish
#      install:
#        - make push-single

# an welcher Stage push single?